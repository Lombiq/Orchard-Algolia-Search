# Hosting - Algolia Search Readme



This module integrates [Algolia](https://www.algolia.com/) with the existing indexing and search features of Orchard.


## Configuration

1. Fill out the API keys in Algolia Search Settings in the Orchard admin.
2. Index some content in Orchard as usual.
3. At this point the search from in the UI will work as expected (because it doesn't use the backend search services), but the admin search won't.
4. Check out your newly created index in the [Algolia Dashboard](https://www.algolia.com/dashboard).
5. If you want the admin search work properly, then configure [Searchable Attributes](https://www.algolia.com/explorer#?index=pages&tab=ranking) (this is like when you set the fields in search settings in Orchard) and [Attributes for faceting](https://www.algolia.com/explorer#?index=pages&tab=display) (this needs to be configured for the `WithField()` and `WithinRange()` methods to work).


## Unsupported Orchard Features

- The sorting methods in `AlgoliaSearchBuilder` won't do anything because Algolia has its own relevance based sorting: https://www.algolia.com/doc/guides/relevance/sorting/. You can configure it on the Algolia dashboard.


## Search on Frontend

- Override *Search.SearchForm.cshtml* if you want a complete different UI.
- Override *Algolia.Searchit.Template.cshtml* if you just want to display hits differently. Note that when you override this template you have to use the [Mustache](https://mustache.github.io/) syntax. It must be a one liner template and use ' instead of ".


## Implementation Notes

- After rebuilding an index all your settings will be lost for that particular index so you need to configure it again in the Algolia dashboard.
- The methods which aren't implemented are either not supported or can be configured from the Algolia dashboard.
- The maximum number of hits is 1000 because it's recommended in order to keep good performance https://www.algolia.com/doc/api-client/csharp/parameters/#paginationlimitedto. With `AlgoliaSearchBuilder.Count()` it's the maximum number you can get so the UI won't display a higher number than what can properly be displayed.